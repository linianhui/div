extern crate div;
use div::class::Method;
use div::class::MethodAccessFlags;
use div::class::U8Reader;

#[test]
fn test_method_vec() {
    let mut u8_reader = U8Reader::new(&[
        0x00, 0x01, 0x00, 0x2D, 0x00, 0x2E, 0x00, 0x01, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x1D, 0x00,
        0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x2A, 0xB7, 0x00, 0x01, 0xB1, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x30, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09,
        0x00, 0x31, 0x00, 0x32, 0x00, 0x02, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x93, 0x00, 0x03, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x53, 0xB2, 0x00, 0x02, 0x12, 0x03, 0xB6, 0x00, 0x04, 0xB2, 0x00,
        0x02, 0x04, 0xB6, 0x00, 0x06, 0xB2, 0x00, 0x02, 0x10, 0x20, 0xB6, 0x00, 0x07, 0xB2, 0x00,
        0x02, 0x10, 0x4C, 0xB6, 0x00, 0x08, 0xB2, 0x00, 0x02, 0x12, 0x09, 0xB6, 0x00, 0x04, 0xB2,
        0x00, 0x02, 0x11, 0x30, 0x39, 0xB6, 0x00, 0x07, 0xB2, 0x00, 0x02, 0x12, 0x0A, 0xB6, 0x00,
        0x07, 0xB2, 0x00, 0x02, 0x14, 0x00, 0x0B, 0xB6, 0x00, 0x0D, 0xB2, 0x00, 0x02, 0x12, 0x0E,
        0xB6, 0x00, 0x0F, 0xB2, 0x00, 0x02, 0x14, 0x00, 0x10, 0xB6, 0x00, 0x12, 0xB1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x30, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0F, 0x00,
        0x08, 0x00, 0x10, 0x00, 0x0F, 0x00, 0x11, 0x00, 0x17, 0x00, 0x12, 0x00, 0x1F, 0x00, 0x13,
        0x00, 0x27, 0x00, 0x14, 0x00, 0x30, 0x00, 0x15, 0x00, 0x38, 0x00, 0x16, 0x00, 0x41, 0x00,
        0x17, 0x00, 0x49, 0x00, 0x18, 0x00, 0x52, 0x00, 0x19, 0x00, 0x33, 0x00, 0x00, 0x00, 0x04,
        0x00, 0x01, 0x00, 0x34,
    ]);
    let methods = Method::vec(2, &mut u8_reader);

    assert_eq!(2, methods.len());

    assert_eq!(1, methods[0].access_flags.len());
    assert!(methods[0].access_flags.contains(&MethodAccessFlags::Public));
    assert_eq!(45, methods[0].name_index);
    assert_eq!(46, methods[0].descriptor_index);
    assert_eq!(1, methods[0].attributes_count);
    assert_eq!(1, methods[0].attributes.len());
    assert_eq!(47, methods[0].attributes[0].attribute_name_index);
    assert_eq!(29, methods[0].attributes[0].attribute_length);

    assert_eq!(2, methods[1].access_flags.len());
    assert!(methods[1].access_flags.contains(&MethodAccessFlags::Public));
    assert!(methods[1].access_flags.contains(&MethodAccessFlags::Static));
    assert_eq!(49, methods[1].name_index);
    assert_eq!(50, methods[1].descriptor_index);
    assert_eq!(2, methods[1].attributes_count);
    assert_eq!(2, methods[1].attributes.len());
    assert_eq!(47, methods[1].attributes[0].attribute_name_index);
    assert_eq!(147, methods[1].attributes[0].attribute_length);
}
